package ch.allink.microsite.cmsConnector
{
import ch.allink.microsite.core.AbstractModel;
import ch.allink.microsite.events.ResultEvent;

import com.greensock.events.LoaderEvent;
import com.greensock.loading.XMLLoader;

import flash.events.EventDispatcher;
import flash.net.URLRequest;

[Event (name='dataLoaded', type='ch.allink.micrositeframework.net.ResultEvent')]

public class ModelRequest extends EventDispatcher 
{
	//-------------------------------------------------------------------------
	//
	//	Variables
	//
	//-------------------------------------------------------------------------
	
	private var request:URLRequest
	private var xmlLoader:XMLLoader
	private var _klass:Class
	private var modelFactory:ModelFactory
	private var requestType:String
	
	//-------------------------------------------------------------------------
	//
	//	Constructor
	//
	//-------------------------------------------------------------------------
	
	public function ModelRequest(klass:Class, url:String, modelFactory:ModelFactory,
								 requestType:String)
	{
		xmlLoader = new XMLLoader(url)
			
		this.requestType = requestType
		this.modelFactory = modelFactory
		_klass = klass
	}
	
	//-------------------------------------------------------------------------
	//
	//	Public methods
	//
	//-------------------------------------------------------------------------
	
	public function load():void
	{
		xmlLoader.addEventListener(LoaderEvent.COMPLETE, xmlLoader_completeHandler)
		xmlLoader.load()
	}
	
	public function dispose():void
	{
	}
	
	//-------------------------------------------------------------------------
	//
	//	Event handlers
	//
	//-------------------------------------------------------------------------
	
	private function xmlLoader_completeHandler(event:LoaderEvent):void
	{
		var xmlLoader:XMLLoader = event.target as XMLLoader
		var data:XML = XML(xmlLoader.content)
		//First Nodes is allway "response" (generated by Pistion)
		//The first level can be ignored.
		if(data[0].name() == "response") data = data.children()[0]
		var collection:Vector.<AbstractModel>
		var abstractModel:AbstractModel
		
		if(requestType == ModelFactory.TYPE_COLLECTION)
			collection = modelFactory.createCollection(klass, data)
		else
			abstractModel = modelFactory.create(klass, data) 
		var resultEvent:ResultEvent = 
			new ResultEvent(ResultEvent.DATA_LOADED, false, false, this, collection, abstractModel)
		dispatchEvent(resultEvent)
	}
	
	//-------------------------------------------------------------------------
	//
	//	Properties
	//
	//-------------------------------------------------------------------------
	
	public function get klass():Class
	{
		return _klass
	}
}
}